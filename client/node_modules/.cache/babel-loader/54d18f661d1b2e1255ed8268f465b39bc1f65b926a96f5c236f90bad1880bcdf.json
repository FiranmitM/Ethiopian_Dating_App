{"ast":null,"code":"// in app.js, we have the whole single page application with the routes to the different pages\n// in each page, we defined the components\n// each component is rendered with some data, which is requested via these services (functions), \n// services can also be used not only to get the data, but to transform it\n// these functions request their data from API endpoint\n// each endpoint is made to return \"response.data\" with a specific format\n\nimport axios from 'axios';\nconst baseUrl = '/api';\nconst setupTables = () => {\n  const request = axios.post(`${baseUrl}/tableSetup`);\n  return request.then(response => response.data);\n};\nconst createUser = signedUpUser => {\n  const request = axios.post(`${baseUrl}/signup`, signedUpUser);\n  return request.then(response => response.data);\n};\nconst verifyUser = userToVerify => {\n  const request = axios.post(`${baseUrl}/signup/verifyuser`, userToVerify);\n  return request.then(response => response.data);\n};\nconst logInUser = signedUpUser => {\n  const request = axios.post(`${baseUrl}/login`, signedUpUser);\n  return request.then(response => response.data);\n};\nconst getSessionUser = () => {\n  const request = axios.get(`${baseUrl}/login`);\n  return request.then(response => response.data);\n};\nconst logOutUser = () => {\n  const request = axios.get(`${baseUrl}/logout`);\n  return request.then(response => response.data);\n};\nconst resetPassword = resetInfo => {\n  const request = axios.post(`${baseUrl}/resetpassword`, resetInfo);\n  return request.then(response => response.data);\n};\nconst setNewPassword = passwords => {\n  const request = axios.post(`${baseUrl}/setnewpassword`, passwords);\n  return request.then(response => response.data);\n};\nconst signUpService = {\n  setupTables,\n  createUser,\n  verifyUser,\n  logInUser,\n  logOutUser,\n  getSessionUser,\n  resetPassword,\n  setNewPassword\n};\nexport default signUpService;","map":{"version":3,"names":["axios","baseUrl","setupTables","request","post","then","response","data","createUser","signedUpUser","verifyUser","userToVerify","logInUser","getSessionUser","get","logOutUser","resetPassword","resetInfo","setNewPassword","passwords","signUpService"],"sources":["/home/franmit/Downloads/Ethiopia_dating_app/client/src/services/signUpService.js"],"sourcesContent":["// in app.js, we have the whole single page application with the routes to the different pages\n// in each page, we defined the components\n// each component is rendered with some data, which is requested via these services (functions), \n// services can also be used not only to get the data, but to transform it\n// these functions request their data from API endpoint\n// each endpoint is made to return \"response.data\" with a specific format\n\nimport axios from 'axios'\nconst baseUrl = '/api'\n\nconst setupTables = () => {\n\tconst request = axios.post(`${baseUrl}/tableSetup`)\n\treturn request.then(response => response.data)\n}\n\nconst createUser = signedUpUser => {\n\tconst request = axios.post(`${baseUrl}/signup`, signedUpUser)\n\treturn request.then(response => response.data)\n}\n\nconst verifyUser = userToVerify => {\n\tconst request = axios.post(`${baseUrl}/signup/verifyuser`, userToVerify)\n\treturn request.then(response => response.data)\n}\n\nconst logInUser = signedUpUser => {\n\tconst request = axios.post(`${baseUrl}/login`, signedUpUser)\n\treturn request.then(response => response.data)\n}\n\nconst getSessionUser = () => {\n\tconst request = axios.get(`${baseUrl}/login`)\n\treturn request.then(response => response.data)\n}\n\nconst logOutUser = () => {\n\tconst request = axios.get(`${baseUrl}/logout`)\n\treturn request.then(response => response.data)\n}\n\nconst resetPassword = resetInfo => {\n\tconst request = axios.post(`${baseUrl}/resetpassword`, resetInfo)\n\treturn request.then(response => response.data)\n}\n\nconst setNewPassword = passwords => {\n\tconst request = axios.post(`${baseUrl}/setnewpassword`, passwords)\n\treturn request.then(response => response.data)\n}\n\nconst signUpService = { setupTables, createUser, verifyUser, logInUser, logOutUser, getSessionUser, resetPassword, setNewPassword }\n\nexport default signUpService"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,OAAO,GAAG,MAAM;AAEtB,MAAMC,WAAW,GAAG,MAAM;EACzB,MAAMC,OAAO,GAAGH,KAAK,CAACI,IAAI,CAAE,GAAEH,OAAQ,aAAY,CAAC;EACnD,OAAOE,OAAO,CAACE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC;AAC/C,CAAC;AAED,MAAMC,UAAU,GAAGC,YAAY,IAAI;EAClC,MAAMN,OAAO,GAAGH,KAAK,CAACI,IAAI,CAAE,GAAEH,OAAQ,SAAQ,EAAEQ,YAAY,CAAC;EAC7D,OAAON,OAAO,CAACE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC;AAC/C,CAAC;AAED,MAAMG,UAAU,GAAGC,YAAY,IAAI;EAClC,MAAMR,OAAO,GAAGH,KAAK,CAACI,IAAI,CAAE,GAAEH,OAAQ,oBAAmB,EAAEU,YAAY,CAAC;EACxE,OAAOR,OAAO,CAACE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC;AAC/C,CAAC;AAED,MAAMK,SAAS,GAAGH,YAAY,IAAI;EACjC,MAAMN,OAAO,GAAGH,KAAK,CAACI,IAAI,CAAE,GAAEH,OAAQ,QAAO,EAAEQ,YAAY,CAAC;EAC5D,OAAON,OAAO,CAACE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC;AAC/C,CAAC;AAED,MAAMM,cAAc,GAAG,MAAM;EAC5B,MAAMV,OAAO,GAAGH,KAAK,CAACc,GAAG,CAAE,GAAEb,OAAQ,QAAO,CAAC;EAC7C,OAAOE,OAAO,CAACE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC;AAC/C,CAAC;AAED,MAAMQ,UAAU,GAAG,MAAM;EACxB,MAAMZ,OAAO,GAAGH,KAAK,CAACc,GAAG,CAAE,GAAEb,OAAQ,SAAQ,CAAC;EAC9C,OAAOE,OAAO,CAACE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC;AAC/C,CAAC;AAED,MAAMS,aAAa,GAAGC,SAAS,IAAI;EAClC,MAAMd,OAAO,GAAGH,KAAK,CAACI,IAAI,CAAE,GAAEH,OAAQ,gBAAe,EAAEgB,SAAS,CAAC;EACjE,OAAOd,OAAO,CAACE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC;AAC/C,CAAC;AAED,MAAMW,cAAc,GAAGC,SAAS,IAAI;EACnC,MAAMhB,OAAO,GAAGH,KAAK,CAACI,IAAI,CAAE,GAAEH,OAAQ,iBAAgB,EAAEkB,SAAS,CAAC;EAClE,OAAOhB,OAAO,CAACE,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC;AAC/C,CAAC;AAED,MAAMa,aAAa,GAAG;EAAElB,WAAW;EAAEM,UAAU;EAAEE,UAAU;EAAEE,SAAS;EAAEG,UAAU;EAAEF,cAAc;EAAEG,aAAa;EAAEE;AAAe,CAAC;AAEnI,eAAeE,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}