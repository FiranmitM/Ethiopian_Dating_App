{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport profileService from '../services/profileService';\nconst initialState = [];\nconst userNotificationSlice = createSlice({\n  name: 'userNotifications',\n  initialState,\n  reducers: {\n    setUserNotifications(state, action) {\n      const content = action.payload;\n      return content;\n    },\n    resetUserNotifications() {\n      return initialState;\n    },\n    removeUserNotification(state, action) {\n      const id = action.payload;\n      return state.filter(notification => notification.id !== id);\n    },\n    readUserNotification(state, action) {\n      const id = action.payload;\n      return state.map(notification => notification.id !== id ? notification : {\n        ...notification,\n        read: 'YES'\n      });\n    },\n    readAllUserNotifications(state) {\n      return state.map(notification => {\n        return {\n          ...notification,\n          read: 'YES'\n        };\n      });\n    },\n    addUserNotification(state, action) {\n      const content = action.payload;\n      return [content, ...state];\n    }\n  }\n});\nexport const {\n  setUserNotifications,\n  resetUserNotifications,\n  removeUserNotification,\n  readUserNotification,\n  readAllUserNotifications,\n  addUserNotification\n} = userNotificationSlice.actions;\nexport const getUserNotifications = () => {\n  return async dispatch => {\n    const notifications = await profileService.getNotifications();\n    if (notifications) dispatch(setUserNotifications(notifications));\n  };\n};\nexport const clearUserNotifications = () => {\n  return dispatch => {\n    profileService.clearNotifications().then(result => {\n      if (result === true) dispatch(resetUserNotifications());\n    });\n  };\n};\nexport const deleteUserNotification = id => {\n  return dispatch => {\n    profileService.deleteNotification(id).then(result => {\n      if (result === true) dispatch(removeUserNotification(id));\n    });\n  };\n};\nexport const setNotificationRead = id => {\n  return dispatch => {\n    profileService.readNotification(id).then(result => {\n      if (result === true) dispatch(readUserNotification(id));\n    });\n  };\n};\nexport const setAllNotificationsRead = () => {\n  return dispatch => {\n    profileService.readAllNotifications().then(result => {\n      if (result === true) dispatch(readAllUserNotifications());\n    });\n  };\n};\nexport default userNotificationSlice.reducer;","map":{"version":3,"names":["createSlice","profileService","initialState","userNotificationSlice","name","reducers","setUserNotifications","state","action","content","payload","resetUserNotifications","removeUserNotification","id","filter","notification","readUserNotification","map","read","readAllUserNotifications","addUserNotification","actions","getUserNotifications","dispatch","notifications","getNotifications","clearUserNotifications","clearNotifications","then","result","deleteUserNotification","deleteNotification","setNotificationRead","readNotification","setAllNotificationsRead","readAllNotifications","reducer"],"sources":["/home/by/datingApp/EDA/client/src/reducers/userNotificationsReducer.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\nimport profileService from '../services/profileService'\n\nconst initialState = []\n\nconst userNotificationSlice = createSlice({\n\tname: 'userNotifications',\n\tinitialState,\n\treducers: {\n\t\tsetUserNotifications(state, action) {\n\t\t\tconst content = action.payload\n\t\t\treturn content\n\t\t},\n\t\tresetUserNotifications() {\n\t\t\treturn initialState\n\t\t},\n\t\tremoveUserNotification(state, action) {\n\t\t\tconst id = action.payload\n\t\t\treturn state.filter(notification =>\n\t\t\t\tnotification.id !== id\n\t\t\t)\n\t\t},\n\t\treadUserNotification(state, action) {\n\t\t\tconst id = action.payload\n\t\t\treturn state.map(notification =>\n\t\t\t\tnotification.id !== id\n\t\t\t\t\t? notification\n\t\t\t\t\t: { ...notification, read: 'YES' }\n\t\t\t)\n\t\t},\n\t\treadAllUserNotifications(state) {\n\t\t\treturn state.map(notification => {\n\t\t\t\treturn { ...notification, read: 'YES' }\n\t\t\t})\n\t\t},\n\t\taddUserNotification(state, action) {\n\t\t\tconst content = action.payload\n\t\t\treturn [content, ...state]\n\t\t}\n\t},\n})\n\nexport const { setUserNotifications, resetUserNotifications, removeUserNotification,\n\treadUserNotification, readAllUserNotifications, addUserNotification } = userNotificationSlice.actions\n\nexport const getUserNotifications = () => {\n\treturn async dispatch => {\n\t\tconst notifications = await profileService.getNotifications()\n\t\tif (notifications)\n\t\t\tdispatch(setUserNotifications(notifications))\n\t}\n}\n\nexport const clearUserNotifications = () => {\n\treturn dispatch => {\n\t\tprofileService.clearNotifications().then(result => {\n\t\t\tif (result === true)\n\t\t\t\tdispatch(resetUserNotifications())\n\t\t})\n\t}\n}\n\nexport const deleteUserNotification = id => {\n\treturn dispatch => {\n\t\tprofileService.deleteNotification(id).then(result => {\n\t\t\tif (result === true)\n\t\t\t\tdispatch(removeUserNotification(id))\n\t\t})\n\t}\n}\n\nexport const setNotificationRead = id => {\n\treturn dispatch => {\n\t\tprofileService.readNotification(id).then(result => {\n\t\t\tif (result === true)\n\t\t\t\tdispatch(readUserNotification(id))\n\t\t})\n\t}\n}\n\nexport const setAllNotificationsRead = () => {\n\treturn dispatch => {\n\t\tprofileService.readAllNotifications().then(result => {\n\t\t\tif (result === true)\n\t\t\t\tdispatch(readAllUserNotifications())\n\t\t})\n\t}\n}\n\nexport default userNotificationSlice.reducer\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}